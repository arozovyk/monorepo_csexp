type test_record1 = {
  alpha: string ;
  beta: int64 list ;
  gamma: unit }[@@deriving irmin]
include
  struct
    let test_record1_t =
      let open Irmin.Type in
        ((((record "test_record1"
              (fun alpha -> fun beta -> fun gamma -> { alpha; beta; gamma }))
             |+ (field "alpha" string (fun t -> t.alpha)))
            |+ (field "beta" (list int64) (fun t -> t.beta)))
           |+ (field "gamma" unit (fun t -> t.gamma)))
          |> sealr
  end[@@ocaml.doc "@inline"][@@merlin.hide ]
type test_record2 =
  {
  the_FIRST_identifier: test_record1 option ;
  the_SECOND_identifier: (string, int32) result list }[@@deriving irmin]
include
  struct
    let test_record2_t =
      let open Irmin.Type in
        (((record "test_record2"
             (fun the_FIRST_identifier ->
                fun the_SECOND_identifier ->
                  { the_FIRST_identifier; the_SECOND_identifier }))
            |+
            (field "the_FIRST_identifier" (option test_record1_t)
               (fun t -> t.the_FIRST_identifier)))
           |+
           (field "the_SECOND_identifier" (list (result string int32))
              (fun t -> t.the_SECOND_identifier)))
          |> sealr
  end[@@ocaml.doc "@inline"][@@merlin.hide ]
