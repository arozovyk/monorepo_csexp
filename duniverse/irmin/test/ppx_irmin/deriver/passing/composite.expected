type test_list1 = string list[@@deriving irmin]
include struct let test_list1_t = let open Irmin.Type in list string end
[@@ocaml.doc "@inline"][@@merlin.hide ]
type test_list2 = int32 list list list[@@deriving irmin]
include
  struct
    let test_list2_t = let open Irmin.Type in list (list (list int32))
  end[@@ocaml.doc "@inline"][@@merlin.hide ]
type test_array = bool array[@@deriving irmin]
include struct let test_array_t = let open Irmin.Type in array bool end
[@@ocaml.doc "@inline"][@@merlin.hide ]
type test_option = unit option[@@deriving irmin]
include struct let test_option_t = let open Irmin.Type in option unit end
[@@ocaml.doc "@inline"][@@merlin.hide ]
type test_pair = (string * int32)[@@deriving irmin]
include struct let test_pair_t = let open Irmin.Type in pair string int32 end
[@@ocaml.doc "@inline"][@@merlin.hide ]
type test_triple = (string * int32 * bool)[@@deriving irmin]
include
  struct
    let test_triple_t = let open Irmin.Type in triple string int32 bool
  end[@@ocaml.doc "@inline"][@@merlin.hide ]
type test_result = (int32, string) result[@@deriving irmin]
include
  struct let test_result_t = let open Irmin.Type in result int32 string end
[@@ocaml.doc "@inline"][@@merlin.hide ]
let (_ : test_list1 Irmin.Type.t) = test_list1_t
let (_ : test_list2 Irmin.Type.t) = test_list2_t
let (_ : test_array Irmin.Type.t) = test_array_t
let (_ : test_option Irmin.Type.t) = test_option_t
let (_ : test_pair Irmin.Type.t) = test_pair_t
let (_ : test_triple Irmin.Type.t) = test_triple_t
let (_ : test_result Irmin.Type.t) = test_result_t
