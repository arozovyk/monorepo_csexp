module ModuleQualifiedTypes =
  struct
    module X =
      struct
        type t = int[@@deriving irmin]
        include struct let t = Irmin.Type.int end[@@ocaml.doc "@inline"]
        [@@merlin.hide ]
      end
    module Y =
      struct
        type foo = X.t list[@@deriving irmin]
        include struct let foo_t = let open Irmin.Type in list X.t end
        [@@ocaml.doc "@inline"][@@merlin.hide ]
      end
    type t = X.t[@@deriving irmin]
    include struct let t = X.t end[@@ocaml.doc "@inline"][@@merlin.hide ]
    type t_result = (X.t, unit) result[@@deriving irmin]
    include
      struct let t_result_t = let open Irmin.Type in result X.t unit end
    [@@ocaml.doc "@inline"][@@merlin.hide ]
    type foo = Y.foo[@@deriving irmin]
    include struct let foo_t = Y.foo_t end[@@ocaml.doc "@inline"][@@merlin.hide
                                                                   ]
    type foo_list = Y.foo list[@@deriving irmin]
    include struct let foo_list_t = let open Irmin.Type in list Y.foo_t end
    [@@ocaml.doc "@inline"][@@merlin.hide ]
  end
