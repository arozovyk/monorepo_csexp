# Testing on multiple platforms and Caml version, but some jobs can share the
# _opam and _build directory.
variables:
  IMAGE_WITH_CACHE: "ocaml/opam:debian-testing-opam"
  OCAML_COMPILER: "4.14.0"
  OPAMSOLVERTIMEOUT: "600"
  OPAM_PACKAGE: "bls12-381"
  # A workaround against a bug in gitlab-runner's default
  # unzipping implementation, which partially breaks caching for the dune _build cache.
  # See https://gitlab.com/gitlab-org/gitlab-runner/-/issues/27496 for more details.
  FF_USE_FASTZIP: "true"
  NODE_VERSION: "v19.3.0"
  NVM_VERSION: "v0.39.2"
  DEFAULT_BRANCH: "master"
  CHANGES_FILENAME: "CHANGES.md"

.job-with-cache: &job_with_cache
  image: ${IMAGE_WITH_CACHE}
  cache:
    # Make the cache unique per commit
    key: opam-cache-$CI_COMMIT_SHORT_SHA
    paths:
      - _build
      - _opam

stages:
  # - dependencies-check
  - lint
  - build
  - test-debian
  - test-alpine
  - install
  - release-checks
  - doc
  - deploy

# FIXME: Some changes have been introduced in commit
# cba740a58bea1a8873a2989d0c12c9e0bd4d2ed4 adding functions to
# blst. We should submit an PR on https://github.com/supranational/blst.
# As soon as it is merged, fix the commit.
# check-blst-version:
#   stage: dependencies-check
#   image: alpine:3.14
#   before_script:
#     - apk add --no-cache wget diffutils
#     - diff --version
#   script:
#     - .ci/check_blst_version.sh
#   rules:
#     - when: always

lint-js:
  image: node:lts
  stage: lint
  before_script:
    - cd .ci/js
    - npm install -d
  script:
    - ./node_modules/eslint/bin/eslint.js -c .eslintrc.js ../../src/runtime_helper.js
    - ./node_modules/eslint/bin/eslint.js -c .eslintrc.js ../../src/bindings/blst_bindings_stubs.js
  rules:
    - when: always

lint:
  stage: lint
  image: ocaml/opam:debian-ocaml-4.12
  before_script:
    - opam install ocamlformat.$(awk -F = '$1 == "version" {print $2}' .ocamlformat)
  script:
    - dune build @fmt
  rules:
    - when: always

lint-c:
  stage: lint
  image: ubuntu:20.04
  script:
    - apt-get update -y
    - apt-get install clang-format-11 git -y
    - clang-format-11 --version
    - clang-format-11 src/bindings/*.c -i
    - clang-format-11 src/bindings/*.h -i
    # Check if a file has been modified and uncommited
    - git diff --exit-code
  rules:
    - when: always

# Build pipeline for debian
# Keep it close to the one for other distributions
.build-test-debian: &build_definition_debian
  stage: test-debian
  before_script:
    # Always update system package manager + setup OPAM env
    - sudo apt-get update
    - eval $(opam env)
    - opam update
    - sudo apt-get install nodejs python3 -y

    # Install emsdk to install emcc
    - git clone https://github.com/emscripten-core/emsdk.git
    - cd emsdk
    - ./emsdk install latest
    - ./emsdk activate latest
    - source "./emsdk_env.sh"
    - cd ../

    # install nvm and node latest version
    - curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/${NVM_VERSION}/install.sh | bash
    - export NVM_DIR="$HOME/.nvm"
    - . "$NVM_DIR/nvm.sh"  # This loads nvm
    - nvm install ${NODE_VERSION}

    # List versions and environments
    - ocaml --version
    - opam --version
    - cc --version
    - emcc --version
    - echo $OPAM_SWITCH_PREFIX
  script:
    - opam install depext --yes
    - opam install . --dry-run --deps-only --locked --with-test --with-doc --yes | awk '/-> installed/{print $3}' | xargs opam depext -iy
    # For benchmark repository
    - opam install core_bench core_unix -y
    - dune build
    - dune build @install
    - dune build @runtest
    - dune build @runtest-js
    # Check built_with_blst_portable is set to true if libblst built with __BLST_PORTABLE__
    - dune clean
    - BLST_PORTABLE=y dune exec ./test/check_built_blst_portable_set.exe
    - dune clean
    - BLST_PORTABLE=y dune build -p ${OPAM_PACKAGE}
    - BLST_PORTABLE=y dune exec ./test/check_built_blst_portable_set.exe
    - dune exec ./test/check_built_blst_portable_set.exe
    # Check built_with_blst_portable is set to false if libblst not built with __BLST_PORTABLE__
    - dune clean
    - dune exec ./test/check_built_blst_portable_not_set.exe
    - dune clean
    - dune build -p ${OPAM_PACKAGE}
    - BLST_PORTABLE=y dune exec ./test/check_built_blst_portable_not_set.exe
    - dune exec ./test/check_built_blst_portable_not_set.exe
  rules:
    - when: always

build-ocaml-4.08-debian-10:
  <<: *build_definition_debian
  image: ocaml/opam:debian-10-ocaml-4.08

build-ocaml-4.09-debian-10:
  <<: *build_definition_debian
  image: ocaml/opam:debian-10-ocaml-4.09

build-ocaml-4.10-debian-10:
  <<: *build_definition_debian
  image: ocaml/opam:debian-10-ocaml-4.10

build-ocaml-4.11-debian-10:
  <<: *build_definition_debian
  image: ocaml/opam:debian-10-ocaml-4.11

build-ocaml-4.12-debian-10:
  <<: *build_definition_debian
  image: ocaml/opam:debian-10-ocaml-4.12

build-ocaml-4.13-debian-10:
  <<: *build_definition_debian
  image: ocaml/opam:debian-10-ocaml-4.13

build-ocaml-4.14-debian-10:
  <<: *build_definition_debian
  image: ocaml/opam:debian-10-ocaml-4.14

build-ocaml-5.0-debian-10:
  <<: *build_definition_debian
  image: ocaml/opam:debian-10-ocaml-5.0

build-ocaml-4.08-debian-11:
  <<: *build_definition_debian
  image: ocaml/opam:debian-11-ocaml-4.08

build-ocaml-4.09-debian-11:
  <<: *build_definition_debian
  image: ocaml/opam:debian-11-ocaml-4.09

build-ocaml-4.10-debian-11:
  <<: *build_definition_debian
  image: ocaml/opam:debian-11-ocaml-4.10

build-ocaml-4.11-debian-11:
  <<: *build_definition_debian
  image: ocaml/opam:debian-11-ocaml-4.11

build-ocaml-4.12-debian-11:
  <<: *build_definition_debian
  image: ocaml/opam:debian-11-ocaml-4.12

build-ocaml-4.13-debian-11:
  <<: *build_definition_debian
  image: ocaml/opam:debian-11-ocaml-4.13

build-ocaml-4.14-debian-11:
  <<: *build_definition_debian
  image: ocaml/opam:debian-11-ocaml-4.14

build-ocaml-5.0-debian-11:
  <<: *build_definition_debian
  image: ocaml/opam:debian-11-ocaml-5.0

# Build and use cache. Useful for other jobs not related to testing.
# Does not run any test
build:
  <<: *job_with_cache
  stage: build
  before_script:
    # Always update system package manager + setup OPAM env
    - sudo apt-get update
    - "[ -d _opam ] || opam switch create --yes --no-install . $OCAML_COMPILER"
    - eval $(opam env)
    - opam repository set-url default https://opam.ocaml.org
    - opam update
    - sudo apt-get install nodejs python3 -y

    # Install emsdk to install emcc
    - git clone https://github.com/emscripten-core/emsdk.git
    - cd emsdk
    - ./emsdk install latest
    - ./emsdk activate latest
    - source "./emsdk_env.sh"
    - cd ../

    # List versions and environments
    - ocaml --version
    - opam --version
    - cc --version
    - emcc --version
    - echo $OPAM_SWITCH_PREFIX
  script:
    - opam install depext --yes
    - opam install . --dry-run --deps-only --locked --with-test --with-doc --yes | awk '/-> installed/{print $3}' | xargs opam depext -iy
    # For benchmark repository. Not included in opam deps
    - opam install core_bench core_unix -y
    - dune build
    # For doc
    - opam install odoc -y
    - dune build @doc
    - cp -r _build/default/_doc/_html _odoc/
  artifacts:
    paths:
      - _odoc
  rules:
    - when: always

# Build pipeline for alpine
# Keep it close to the one for other distributions
# Keep it close to utils/Dockerfile-alpine to be able to debug alpine on a dev
# machine.
.build-test-alpine: &build_definition_alpine
  stage: test-alpine
  before_script:
    # Always update system package manager + setup OPAM env
    - eval $(opam env)
    - opam update
    # gcompat is mandatory because the linker emsdk/clang uses is
    # /lib64/ld-linux-x86-64.so.2, provided by gcompat
    # linux headers is required to compile core_unix
    - sudo apk add build-base python3 gcompat nodejs linux-headers

    # Install emsdk to install emcc
    - git clone https://github.com/emscripten-core/emsdk.git
    - cd emsdk
    - ./emsdk install latest
    - ./emsdk activate latest
    - source "./emsdk_env.sh"
    - cd ../

    # List versions and environments
    - emcc --version
    - node --version
    - PATH=/usr/bin:$PATH node --version
    - ocaml --version
    - opam --version
    - cc --version
    - echo $OPAM_SWITCH_PREFIX
  script:
    - opam install depext --yes
    - opam install . --dry-run --deps-only --locked --with-test --with-doc --yes | awk '/-> installed/{print $3}' | xargs opam depext -iy
    # For benchmark repository
    - opam install core_bench core_unix -y
    - dune build
    - dune build @install
    - dune build @runtest
    - PATH=/usr/bin:$PATH dune build @runtest-js
    # Check built_with_blst_portable is set to true if libblst built with __BLST_PORTABLE__
    - dune clean
    - BLST_PORTABLE=y dune exec ./test/check_built_blst_portable_set.exe
    - dune clean
    - BLST_PORTABLE=y dune build -p ${OPAM_PACKAGE}
    - BLST_PORTABLE=y dune exec ./test/check_built_blst_portable_set.exe
    - dune exec ./test/check_built_blst_portable_set.exe
    # Check built_with_blst_portable is set to false if libblst not built with __BLST_PORTABLE__
    - dune clean
    - dune exec ./test/check_built_blst_portable_not_set.exe
    - dune clean
    - dune build -p ${OPAM_PACKAGE}
    - BLST_PORTABLE=y dune exec ./test/check_built_blst_portable_not_set.exe
    - dune exec ./test/check_built_blst_portable_not_set.exe
  rules:
    - when: always

build-ocaml-4.08-alpine-3.16:
  <<: *build_definition_alpine
  image: ocaml/opam:alpine-3.16-ocaml-4.08

build-ocaml-4.09-alpine-3.16:
  <<: *build_definition_alpine
  image: ocaml/opam:alpine-3.16-ocaml-4.09

build-ocaml-4.10-alpine-3.16:
  <<: *build_definition_alpine
  image: ocaml/opam:alpine-3.16-ocaml-4.10

build-ocaml-4.11-alpine-3.16:
  <<: *build_definition_alpine
  image: ocaml/opam:alpine-3.16-ocaml-4.11

build-ocaml-4.12-alpine-3.16:
  <<: *build_definition_alpine
  image: ocaml/opam:alpine-3.16-ocaml-4.12

build-ocaml-4.13-alpine-3.16:
  <<: *build_definition_alpine
  image: ocaml/opam:alpine-3.16-ocaml-4.13

build-ocaml-4.14-alpine-3.16:
  <<: *build_definition_alpine
  image: ocaml/opam:alpine-3.16-ocaml-4.14

build-ocaml-5.0-alpine-3.16:
  <<: *build_definition_alpine
  image: ocaml/opam:alpine-3.16-ocaml-5.0

build-ocaml-4.08-alpine-3.17:
  <<: *build_definition_alpine
  image: ocaml/opam:alpine-3.17-ocaml-4.08

build-ocaml-4.09-alpine-3.17:
  <<: *build_definition_alpine
  image: ocaml/opam:alpine-3.17-ocaml-4.09

build-ocaml-4.10-alpine-3.17:
  <<: *build_definition_alpine
  image: ocaml/opam:alpine-3.17-ocaml-4.10

build-ocaml-4.11-alpine-3.17:
  <<: *build_definition_alpine
  image: ocaml/opam:alpine-3.17-ocaml-4.11

build-ocaml-4.12-alpine-3.17:
  <<: *build_definition_alpine
  image: ocaml/opam:alpine-3.17-ocaml-4.12

build-ocaml-4.13-alpine-3.17:
  <<: *build_definition_alpine
  image: ocaml/opam:alpine-3.17-ocaml-4.13

build-ocaml-4.14-alpine-3.17:
  <<: *build_definition_alpine
  image: ocaml/opam:alpine-3.17-ocaml-4.14

build-ocaml-5.0-alpine-3.17:
  <<: *build_definition_alpine
  image: ocaml/opam:alpine-3.17-ocaml-5.0

opam-install-and-remove:
  stage: install
  image: ocaml/opam:debian-ocaml-4.11
  before_script:
    - sudo apt-get update
    # List versions and environments
    - ocaml --version
    - opam --version
    - cc --version
    - echo $OPAM_SWITCH_PREFIX
    - opam repository set-url default https://opam.ocaml.org
    - opam update
  script:
    - opam pin add ${OPAM_PACKAGE}.dev . --no-action
    - opam depext ${OPAM_PACKAGE}.dev -i -y
    - opam install ${OPAM_PACKAGE}.dev -y --deps-only
    - opam install ${OPAM_PACKAGE}.dev -y
    - opam remove -a -y ${OPAM_PACKAGE}.dev
    - opam install ${OPAM_PACKAGE}.dev -y --with-test
    # Check blst headers are installed
    - ls $OPAM_SWITCH_PREFIX/lib/${OPAM_PACKAGE}/blst.h
    - ls $OPAM_SWITCH_PREFIX/lib/${OPAM_PACKAGE}/blst_extended.h
    - ls $OPAM_SWITCH_PREFIX/lib/${OPAM_PACKAGE}/blst_aux.h
    - ls $OPAM_SWITCH_PREFIX/lib/${OPAM_PACKAGE}/blst_misc.h
    - ls $OPAM_SWITCH_PREFIX/lib/${OPAM_PACKAGE}/caml_bls12_381_stubs.h
    - opam remove -a -y ${OPAM_PACKAGE}.dev
  rules:
    - when: always

opam-install-and-remove-local-switch:
  stage: install
  image: ocaml/opam:debian-ocaml-4.11
  before_script:
    - sudo apt-get update
    # Run everything in a local switch
    - opam switch create ./ 4.09.1 --no-install
    - eval $(opam config env)
    # List versions and environments
    - ocaml --version
    - opam --version
    - cc --version
    - echo $OPAM_SWITCH_PREFIX
    - opam repository set-url default https://opam.ocaml.org
    - opam update
  script:
    - opam pin add ${OPAM_PACKAGE}.dev . --no-action
    - opam depext ${OPAM_PACKAGE}.dev -i -y
    - opam install ${OPAM_PACKAGE}.dev -y --deps-only
    - opam install ${OPAM_PACKAGE}.dev -y
    - opam remove -a -y ${OPAM_PACKAGE}.dev
    - opam install ${OPAM_PACKAGE}.dev -y --with-test
    # Check blst headers are installed
    - ls $OPAM_SWITCH_PREFIX/lib/${OPAM_PACKAGE}/blst.h
    - ls $OPAM_SWITCH_PREFIX/lib/${OPAM_PACKAGE}/blst_extended.h
    - ls $OPAM_SWITCH_PREFIX/lib/${OPAM_PACKAGE}/blst_aux.h
    - ls $OPAM_SWITCH_PREFIX/lib/${OPAM_PACKAGE}/blst_misc.h
    - ls $OPAM_SWITCH_PREFIX/lib/${OPAM_PACKAGE}/caml_bls12_381_stubs.h
    - opam remove -a -y ${OPAM_PACKAGE}.dev
  rules:
    - when: always

check-changes-has-changed:
  image: ubuntu:20.04
  stage: release-checks
  before_script:
    - apt-get update
    - apt-get install git -y
    - git fetch -a
  script:
    # we want the files to be different, therefore we negate the condition
    # https://stackoverflow.com/questions/52145224/invert-a-test-in-gitlab-ci-yml
    # -> (! COMMAND) because `!` is a reserved character in YAML. ! will be
    # -> ignore without parenthesis...
    - (! git diff --exit-code origin/${DEFAULT_BRANCH} -- ${CHANGES_FILENAME})
  # Only when we do a PR
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

pages:
  <<: *job_with_cache
  stage: deploy
  script:
    - cp -r _odoc public/
  artifacts:
    paths:
      - public
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'

npm-publish:
  <<: *job_with_cache
  only:
    - tags
  stage: deploy
  variables:
    NODE_VERSION: "12.16.1"
  before_script:
    - sudo apt-get update -y
    - sudo apt-get install git curl jq -y
    # Install NVM to publish the package
    # Using nodejs/npm from debian registry does not work. Looks like node.12.22
    # does not work. Do not know why.
    - curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash
    - export NVM_DIR="$HOME/.nvm"
    - . "$NVM_DIR/nvm.sh"
    - nvm install ${NODE_VERSION}
    # Print binaries versions
    - jq --version
    - node --version
    - npm --version
    - mkdir -p dist
    - cp _build/default/src/blst.js dist/blst.js
    - cp _build/default/src/blst.wasm dist/blst.wasm
    # See https://gitlab.com/nomadic-labs/cryptography/ocaml-bls12-381/-/jobs/3575292937
    - git config --global --add safe.directory ${CI_PROJECT_DIR}
  script:
    # !! projects/${CI_PROJECT_ID} is required
    - echo "@nomadic-labs:registry=https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/packages/npm/" > .npmrc
    # https://docs.gitlab.com/ee/user/packages/npm_registry/
    - echo "//gitlab.com/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken=${CI_JOB_TOKEN}" >> .npmrc
    - echo "//gitlab.com/api/v4/packages/npm/:_authToken=${CI_JOB_TOKEN}" >> .npmrc
    # In the case of a tag, git describe outputs only the tag, not tag-NB_COMMIT-HASH
    - >
      jq --arg version $(git describe) '. + {version: $version}' < package.json > package.json.new
    - mv package.json.new package.json
    - cat package.json
    # Do not publish with the tag `latest` and rely on the SemVer to get the
    # latest version.
    # See https://docs.npmjs.com/cli/v8/commands/npm-dist-tag
    # > Publishing a package sets the latest tag to the published version unless
    # > the --tag option is used. For example, npm publish --tag=beta.
    # Useful to not rely on the latest tag when there are bugfixes in a previous
    # major version
    - npm publish --tag tag-$(git describe)
